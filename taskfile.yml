version: '3'

vars:
  BINARY_NAME: tempest-influx
  BUILD_DIR: bin
  CMD_DIR: cmd/tempest-influx
  IMAGE: tempest-influx:latest
  FLAGS: --debug --verbose

tasks:
  default:
    desc: Default task - build the application
    deps: [build]

  build:
    desc: Build the application
    sources:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}} ./{{.CMD_DIR}}

  build-all:
    desc: Build for all platforms
    deps: [build-linux, build-windows, build-darwin]

  build-linux:
    desc: Build for Linux
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - GOOS=linux GOARCH=amd64 go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-amd64 ./{{.CMD_DIR}}

  build-windows:
    desc: Build for Windows
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - GOOS=windows GOARCH=amd64 go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-windows-amd64.exe ./{{.CMD_DIR}}

  build-darwin:
    desc: Build for macOS
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - GOOS=darwin GOARCH=amd64 go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-amd64 ./{{.CMD_DIR}}

  clean:
    desc: Clean build artifacts
    cmds:
      - go clean
      - rm -rf {{.BUILD_DIR}}

  run:
    desc: Run the application
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} {{.FLAGS}}

  dev:
    desc: Run in development mode
    cmds:
      - go run ./{{.CMD_DIR}} {{.FLAGS}}

  test:
    desc: Run tests
    cmds:
      - go test -v ./...

  test-coverage:
    desc: Run tests with coverage
    cmds:
      - go test -cover ./...
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html

  bench:
    desc: Run benchmarks
    cmds:
      - go test -bench=. -benchmem ./...

  race:
    desc: Run tests with race detection
    cmds:
      - go test -race -v ./...

  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  lint:
    desc: Run staticcheck linter
    cmds:
      - |
        if command -v staticcheck >/dev/null 2>&1; then
          staticcheck ./...
        else
          echo "staticcheck not installed. Install with: go install honnef.co/go/tools/cmd/staticcheck@latest"
        fi

  tidy:
    desc: Tidy Go modules
    cmds:
      - go mod tidy

  deps-update:
    desc: Update dependencies
    cmds:
      - go get -u ./...
      - go mod tidy

  tools:
    desc: Install development tools
    cmds:
      - go install honnef.co/go/tools/cmd/staticcheck@latest
      - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
      - go install golang.org/x/vuln/cmd/govulncheck@latest

  security:
    desc: Run security checks
    cmds:
      - |
        if command -v gosec >/dev/null 2>&1; then
          gosec ./...
        else
          echo "gosec not installed. Install with: task tools"
        fi

  vuln-check:
    desc: Check for dependency vulnerabilities
    cmds:
      - |
        if command -v govulncheck >/dev/null 2>&1; then
          govulncheck ./...
        else
          echo "govulncheck not installed. Install with: task tools"
        fi

  docker-build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.IMAGE}} .

  docker-run:
    desc: Run Docker container
    deps: [docker-build]
    cmds:
      - |
        if [ -f config/tempest_influx.yml ]; then
          VOLUMES="-v $PWD/config:/config"
        fi
        docker run --rm --net=host ${VOLUMES:-} {{.IMAGE}}

  check:
    desc: Run all checks (format, vet, test, lint)
    deps: [fmt, vet, test, lint]

  ci:
    desc: Run CI pipeline locally
    deps: [tidy, fmt, vet, test, lint, build]

  all-checks:
    desc: Run comprehensive checks including security
    deps: [check, security, vuln-check]

  help:
    desc: Show available tasks
    cmds:
      - task --list